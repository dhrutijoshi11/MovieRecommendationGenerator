# -*- coding: utf-8 -*-
"""Dataset Creation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12jEX3QhjlQcJ4exEPgUAjqDhPt8m5zMM
"""

#Printing the list from url(basically doing web scrapping), this is example of getting list from url. We have gathered all movies list from the below code.
import requests
from bs4 import BeautifulSoup

url = "https://www.imdb.com/list/ls061634734/?ref_=otl_1"
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
}

response = requests.get(url, headers=headers)
if response.status_code == 200:
    soup = BeautifulSoup(response.content, "html.parser")
    titles = soup.find_all('h3', class_='lister-item-header')

    # Create an empty list to store the movie titles
    movie_titles_list = []

    for title in titles:
        movie_title = title.get_text().strip()
        movie_titles_list.append(movie_title)

    # Print the list of movie titles
    print(movie_titles_list)

else:
    print("Failed to fetch IMDb top 250 movie list")
len(movie_titles_list)

#Cleaning movie list, this is just example of one the list.
import re

movie_titles_list = ['1.\n7th Heaven\n(1927)', '2.\nTwo Arabian Knights\n(1927)', '3.\nThe Divine Lady\n(1928)', '4.\nAll Quiet on the Western Front\n(1930)', '5.\nSkippy\n(1931)', '6.\nBad Girl\n(1931)', '7.\nCavalcade\n(1933)', '8.\nIt Happened One Night\n(1934)', '9.\nThe Informer\n(1935)', '10.\nMr. Deeds Goes to Town\n(1936)', '11.\nThe Awful Truth\n(1937)', "12.\nYou Can't Take It with You\n(1938)", '13.\nGone with the Wind\n(1939)', '14.\nThe Grapes of Wrath\n(1940)', '15.\nHow Green Was My Valley\n(1941)', '16.\nMrs. Miniver\n(1942)', '17.\nCasablanca\n(1942)', '18.\nGoing My Way\n(1944)', '19.\nThe Lost Weekend\n(1945)', '20.\nThe Best Years of Our Lives\n(1946)', "21.\nGentleman's Agreement\n(1947)", '22.\nThe Treasure of the Sierra Madre\n(1948)', '23.\nA Letter to Three Wives\n(1949)', '24.\nAll About Eve\n(1950)', '25.\nA Place in the Sun\n(1951)', '26.\nThe Quiet Man\n(1952)', '27.\nFrom Here to Eternity\n(1953)', '28.\nOn the Waterfront\n(1954)', '29.\nMarty\n(1955)', '30.\nGiant\n(1956)', '31.\nThe Bridge on the River Kwai\n(1957)', '32.\nGigi\n(1958)', '33.\nBen-Hur\n(1959)', '34.\nThe Apartment\n(1960)', '35.\nWest Side Story\n(1961)', '36.\nLawrence of Arabia\n(1962)', '37.\nTom Jones\n(1963)', '38.\nMy Fair Lady\n(1964)', '39.\nThe Sound of Music\n(1965)', '40.\nA Man for All Seasons\n(1966)', '41.\nThe Graduate\n(1967)', '42.\nOliver!\n(1968)', '43.\nMidnight Cowboy\n(1969)', '44.\nPatton\n(1970)', '45.\nThe French Connection\n(1971)', '46.\nCabaret\n(1972)', '47.\nThe Sting\n(1973)', '48.\nThe Godfather Part II\n(1974)', "49.\nOne Flew Over the Cuckoo's Nest\n(1975)", '50.\nRocky\n(1976)', '51.\nAnnie Hall\n(1977)', '52.\nThe Deer Hunter\n(1978)', '53.\nKramer vs. Kramer\n(1979)', '54.\nOrdinary People\n(1980)', '55.\nReds\n(1981)', '56.\nGandhi\n(1982)', '57.\nTerms of Endearment\n(1983)', '58.\nAmadeus\n(1984)', '59.\nOut of Africa\n(1985)', '60.\nPlatoon\n(1986)', '61.\nThe Last Emperor\n(1987)', '62.\nRain Man\n(1988)', '63.\nBorn on the Fourth of July\n(1989)', '64.\nDances with Wolves\n(1990)', '65.\nThe Silence of the Lambs\n(1991)', '66.\nUnforgiven\n(1992)', "67.\nSchindler's List\n(1993)", '68.\nForrest Gump\n(1994)', '69.\nBraveheart\n(1995)', '70.\nThe English Patient\n(1996)', '71.\nTitanic\n(1997)', '72.\nSaving Private Ryan\n(1998)', '73.\nAmerican Beauty\n(1999)', '74.\nTraffic\n(2000)', '75.\nA Beautiful Mind\n(2001)', '76.\nThe Pianist\n(2002)', '77.\nThe Lord of the Rings: The Return of the King\n(2003)', '78.\nMillion Dollar Baby\n(2004)', '79.\nBrokeback Mountain\n(2005)', '80.\nThe Departed\n(2006)', '81.\nNo Country for Old Men\n(2007)', '82.\nSlumdog Millionaire\n(2008)', '83.\nThe Hurt Locker\n(2008)', "84.\nThe King's Speech\n(2010)", '85.\nThe Artist\n(I) (2011)', '86.\nLife of Pi\n(2012)', '87.\nGravity\n(2013)', '88.\nBirdman or (The Unexpected Virtue of Ignorance)\n(2014)', '89.\nThe Revenant\n(I) (2015)', '90.\nLa La Land\n(2016)', '91.\nThe Shape of Water\n(2017)', '92.\nRoma\n(2018)', '93.\nParasite\n(2019)', '94.\nNomadland\n(2020)', '95.\nThe Power of the Dog\n(2021)', '96.\nEverything Everywhere All at Once\n(2022)']

# Function to clean the movie title
def clean_movie_title(title):
    # Remove numbers followed by a period
    title = re.sub(r'\d+\.', '', title)
    # Remove '(year)' pattern
    title = re.sub(r'\(\d+\)', '', title)
    # Remove '\n' and any leading/trailing whitespaces
    title = title.replace('\n', '').strip()
    return title

# Clean the movie titles using the function
cleaned_movie_titles = [clean_movie_title(title) for title in movie_titles_list]

# Print the cleaned movie titles
print(cleaned_movie_titles)

#Fetching data for IMDB website using the list, below given is for one list likewise we have got data for many list and combined into one dataset.
import imdb
import pandas as pd

# Create an instance of the IMDb class
ia = imdb.IMDb()

# List of movie titles
movie_titles = ['Rome, Open City', 'Ugetsu', 'Tokyo Story', 'Wings of Desire', 'Apocalypto', 'Autumn Sonata', "Pan's Labyrinth", 'Winter Light', 'The Celebration', 'The Orphanage', 'The Discreet Charm of the Bourgeoisie', 'Kung Fu Hustle', 'The Raid 2',
                'Shaolin Soccer', 'The Great Beauty', 'Chungking Express', 'The Virgin Spring', 'A Bittersweet Life', 'Battle Royale', 'Persona', 'A Separation', 'Funny Games', 'Mother', 'La Dolce Vita', 'Maqbool', 'Haider', 'The Raid: Redemption',
                'Sophie Scholl: The Final Days', 'Ali: Fear Eats the Soul', 'Like Stars on Earth', 'The Grand Illusion', 'Army of Shadows', 'The Tenant', 'Omkara', 'Ghost in the Shell', 'Dil Chahta Hai', 'Gangs of Wasseypur', 'The Leopard', 'Harakiri',
                'Fireworks', 'Perfect Blue', 'Paprika', 'Happy Together', '13 Assassins', 'Woman in the Dunes', 'The Sword of Doom', 'Samurai Rebellion', 'Sansho the Bailiff', 'Onibaba', 'Stray Dog', 'Drunken Angel', 'Cure', 'Rang De Basanti', '3 Idiots',
                'The Good the Bad the Weird', 'Joint Security Area', 'Oasis', 'Silenced', 'Peppermint Candy', 'A Wednesday', 'Come and See', 'Cries & Whispers', 'Summer with Monika', 'Sawdust and Tinsel', 'The Magician', 'Shame', 'Ip Man 2', 'Death Note: The Last Name',
                'The Rules of the Game', 'Timecrimes', 'The Wind Rises', 'Talk to Her', 'The Exterminating Angel', 'Lagaan: Once Upon a Time in India', 'Swades', 'Hera Pheri', 'Vaastav: The Reality', 'Sholay', 'Special 26', 'Farewell My Concubine', 'Blind Mountain', 'Innocent Voices', 'The Wave', 'Kin-dza-dza!', 'Ivan Vasilyevich Changes His Profession', 'Touchez Pas au Grisbi', 'Alphaville', 'Ninja Scroll', 'The Ascent', 'Le Jour Se Leve', 'A Man Escaped', 'The Return', 'Breathless', 'A Better Tomorrow II']
# Create an empty DataFrame to store movie details and reviews
columns = ['Title', 'Year', 'Rating', 'Genres', 'User Reviews']
df_movies = pd.DataFrame(columns=columns)

# Loop through each movie title
for movie_title in movie_titles:
    print(f"Fetching details for movie: {movie_title}")

    # Search for the movie by title
    movies = ia.search_movie(movie_title)

    # Get the first movie from the search results (assuming it's the correct one)
    if movies:
        movie = movies[0]
        movie_id = movie.movieID

        # Retrieve the movie details based on the movie ID
        ia.update(movie, info=['main', 'year', 'rating', 'genres', 'cast'])

        # Create a dictionary with movie details (Title, Year, Rating, Genres)
        movie_data = {
            'Title': movie['title'],
            'Year': movie['year'],
            'Rating': movie['rating'],
            'Genres': ', '.join(movie['genres']),
        }

        # Retrieve user reviews for the movie
        reviews = ia.get_movie_reviews(movie_id)

        # Add the top 10 reviews to the DataFrame
        review_counter = 0
        for review in reviews['data']['reviews']:
            content = review['content']
            movie_data['User Reviews'] = content
            df_movies = df_movies.append(movie_data, ignore_index=True)

            review_counter += 1
            if review_counter == 10:
                break

    else:
        print(f"No movie found with the title: {movie_title}")

# Print the final DataFrame with movie details and top 10 reviews
print("\nDataFrame:")
print(df_movies)

#storing data into csv
df_movies.to_csv('movie_4.csv', index=False)

#Fetching data for rotten tomatoes from IMDB lists
import pandas as pd
import requests
from bs4 import BeautifulSoup

def scrape_movie_info(movie_title):
    url = f'https://www.rottentomatoes.com/m/{movie_title.lower().replace(" ", "_")}'
    webpage = requests.get(url).text
    soup = BeautifulSoup(webpage, 'lxml')

    # Extract movie title
    title = soup.find('h1').text.strip()

    # Extract genre
    genre = soup.find('p', {'slot': 'info', 'class': 'info'})
    info_text = genre.text.strip() if genre else "Genre Not Found"
    parts = info_text.split(',')

    # Extract RT Rating
    score_icon_critic_tag = soup.find('score-details-audience')
    percentage_value = None
    if score_icon_critic_tag and 'value' in score_icon_critic_tag.attrs:
        percentage_value = score_icon_critic_tag['value']

    # Extract reviews
    review_balloon_tags = soup.find_all('review-speech-balloon')
    review_col = [tag['reviewquote'] for tag in review_balloon_tags]

    # Ensure there are only 10 reviews or less
    top_10_reviews = review_col[:10]

    # Create a DataFrame with the desired rows and columns
    data = {
        'Name': [title] * len(top_10_reviews),
        'Genre': parts[1] if len(parts) > 1 else None,
        'RT_review': top_10_reviews
    }

    # Create the DataFrame
    df = pd.DataFrame(data)
    return df

# Example: List of movie titles
movie_titles = ['Pulp Fiction', 'Reservoir Dogs', 'Kill Bill: Vol. 1', 'Kill Bill: Vol. 2', 'Django Unchained', 'Fight Club', 'Inception', 'Interstellar', 'Alien', 'Predators', 'Scarface', 'Forrest Gump', 'Se7en', 'The Shawshank Redemption', 'Life Is Beautiful', 'Let the Right One In', 'Back to the Future', 'Back to the Future Part II', 'Back to the Future Part III', 'The Dark Knight', 'The Dark Knight Rises', 'Batman Begins', 'The Shining', 'Whiplash', 'The Italian Job', 'Toy Story', 'Toy Story 2', 'Toy Story 3', 'Monsters, Inc.', 'Brave', 'WALL·E', 'The Incredibles', 'Up', "A Bug's Life", 'Finding Nemo', 'Finding Dory', 'Ratatouille', 'Cars', 'Cars 2', 'The Wolf of Wall Street', 'Titanic', 'Silence(I)', 'Cinema Paradiso', 'Shutter Island', 'The Princess Bride', 'The Big Short', 'Roman Holiday', 'Big Daddy', 'The Big Lebowski', 'The Revenant(I)', 'Wanted', 'Elf', "Ocean's Eleven", 'The Silence of the Lambs', 'Rocky', 'Mad Max: Fury Road', 'The Bourne Identity', 'The Bourne Supremacy', 'The Bourne Ultimatum', 'The Bourne Legacy', 'Tropic Thunder', 'Jason Bourne(I)', 'Avatar', "The Hitchhiker's Guide to the Galaxy", 'The Prestige', 'Sherlock Holmes', 'The Fast and the Furious', '2 Fast 2 Furious', 'The Fast and the Furious: Tokyo Drift', 'Fast & Furious', 'Fast Five', 'Fast & Furious 6', 'Furious 7', 'The Fate of the Furious', 'Snowpiercer', 'La Bamba', 'Ladrón que roba a ladrón', 'Under the Same Moon', 'Mrs. Doubtfire', 'Jumanji', 'Zathura: A Space Adventure', 'School of Rock', 'Nacho Libre', 'Kung Fu Panda', 'Kung Fu Panda 2', 'Superbad', 'Scott Pilgrim vs. the World', '21 Jump Street', '22 Jump Street', 'The Chronicles of Narnia: The Lion, the Witch and the Wardrobe', 'The Chronicles of Narnia: Prince Caspian', 'The Chronicles of Narnia: The Voyage of the Dawn Treader', 'Remember the Titans', 'Coach Carter', 'Glory Road', 'Goal! The Dream Begins', 'Gran Torino', 'Raiders of the Lost Ark', 'Indiana Jones and the Temple of Doom', 'Indiana Jones and the Last Crusade']

# Scrape information for each movie in the list
result_df_list = []
for movie_title in movie_titles:
    result_df = scrape_movie_info(movie_title)
    result_df_list.append(result_df)

# Concatenate all DataFrames into a single DataFrame
final_df = pd.concat(result_df_list, ignore_index=True)

#storing data into csv for rotten tomatoes
final_df.to_csv('rt_movie2.csv', index=False)

#Merging all movie file into one for both imdb and Rotten tomatoes, below is just sample for merging imdb data files. First we have merged all IMDB files and then we have merged all rotten movies. By merging we got two different files one is for imdb and another is for rotten tomatoes.
import pandas as pd

# List of file names to merge
file_names = ["movie1.csv","movie2.csv","movie3.csv","movie4.csv","movie5.csv","movie6.csv","movie_1.csv", "movie_2.csv","movie_3.csv","movie_4.csv","movie_5.csv","movie_6.csv"]
# Create an empty list to hold DataFrames for each file
dataframes = []

# Read each CSV file into a DataFrame and add it to the list
for file in file_names:
    df = pd.read_csv(file)
    dataframes.append(df)

# Concatenate the DataFrames into a single DataFrame
merged_df = pd.concat(dataframes, ignore_index=True)

# Save the merged DataFrame to a new CSV file
merged_df.to_csv('IMDB_data.csv', index=False)

df1= pd.read_csv('IMDB_data.csv')
df2 = pd.read_csv('RT_data.csv')

# Merging 2 files into one to get final dataset.
merged_df = pd.merge(df1, df2, left_on='Title', right_on='Name', how='outer', suffixes=('_df1', '_df2'))

# Drop duplicates in the 'Review' columns for each dataframe
merged_df['User Reviews'] = merged_df['User Reviews'].drop_duplicates()
merged_df['RT_review'] = merged_df['RT_review'].drop_duplicates()

# Fill NaN values in the 'Review' columns with empty strings
merged_df['User Reviews'].fillna('', inplace=True)
merged_df['RT_review'].fillna('', inplace=True)

# Reset index to renumber the rows (optional)
merged_df.reset_index(drop=True, inplace=True)

#storing data into csv
merged_df.to_csv('dataset.csv', index=False)